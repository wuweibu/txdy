syntax = "proto3";
// Automatically generated by ProtoYang
// compiled 2018-09-04 11:42:27
// ProtoYang-version 1
// module huawei-mac
// revision 2018-06-11
// revision 2017-12-23
// revision 2017-03-23
// revision 2013-01-01
// namespace http://www.huawei.com/netconf/vrp/huawei-mac

package huawei_mac;

message Mac {
   message BdFdbDynamics {
      message BdFdbDynamic {
         uint32 bdId = 1;
         bool ceDefault = 2;
         uint32 cevid = 3;
         uint64 desByteCount = 4;
         uint64 desPacketCount = 5;
         string lastChangeTime = 6;
         uint32 learnedPeriod = 7;
         bool macAccEnable = 8;
         string macAddress = 9;
         enum MacType {
            MacType_AUTHEN = 0;
            MacType_BLACKHOLE = 1;
            MacType_DYNAMIC = 2;
            MacType_DYNX_BLACKHOLE = 3;
            MacType_EVN = 4;
            MacType_MUX = 5;
            MacType_OVSDB = 6;
            MacType_SECURITY = 7;
            MacType_SNOOPING = 8;
            MacType_STATIC = 9;
            MacType_STICKY = 10;
            MacType_TUNNEL = 11;
         };
         MacType macType = 10;
         string outIfName = 11;
         bool peDefault = 12;
         string peerIP = 13;
         string peerIpv6 = 14;
         enum PwRole {
            PwRole_MASTER = 0;
            PwRole_NULL = 1;
            PwRole_SLAVE = 2;
         };
         PwRole pwRole = 15;
         string slotId = 16;
         uint64 souByteCount = 17;
         uint64 souPacketCount = 18;
         bool unTag = 19;
         uint32 vid = 20;
         string vsiName = 21;
      }
      repeated BdFdbDynamic bdFdbDynamic = 1;
   }
   BdFdbDynamics bdFdbDynamics = 1;
   message BdFdbs {
      message BdFdb {
         uint32 bdId = 1;
         bool ceDefault = 2;
         uint32 cevid = 3;
         uint32 learnedPeriod = 4;
         string macAddress = 5;
         enum MacType {
            MacType_AUTHEN = 0;
            MacType_BLACKHOLE = 1;
            MacType_DYNAMIC = 2;
            MacType_DYNX_BLACKHOLE = 3;
            MacType_EVN = 4;
            MacType_MUX = 5;
            MacType_OVSDB = 6;
            MacType_SECURITY = 7;
            MacType_SNOOPING = 8;
            MacType_STATIC = 9;
            MacType_STICKY = 10;
            MacType_TUNNEL = 11;
         };
         MacType macType = 6;
         string outIfName = 7;
         bool peDefault = 8;
         string slotId = 9;
         bool unTag = 10;
         uint32 vid = 11;
      }
      repeated BdFdb bdFdb = 1;
   }
   BdFdbs bdFdbs = 2;
   message BdMacLimits {
      message BdMacLimit {
         enum Action {
            Action_DISCARD = 0;
            Action_FORWARD = 1;
         };
         Action action = 1;
         enum Alarm {
            Alarm_DISABLE = 0;
            Alarm_ENABLE = 1;
         };
         Alarm alarm = 2;
         uint32 bdId = 3;
         uint32 downThresholdCx = 4;
         uint32 maximum = 5;
         uint32 rate = 6;
         uint32 upThresholdCx = 7;
      }
      repeated BdMacLimit bdMacLimit = 1;
   }
   BdMacLimits bdMacLimits = 3;
   message BdMacTotalNumbers {
      message BdMacTotalNumber {
         uint32 bdId = 1;
         uint32 number = 2;
      }
      repeated BdMacTotalNumber bdMacTotalNumber = 1;
   }
   BdMacTotalNumbers bdMacTotalNumbers = 4;
   message EvpnFdbs {
      message EvpnFdb {
         string evpnName = 1;
         bool isIMac = 2;
         string lastChangeTime = 3;
         string macAddress = 4;
         enum MacType {
            MacType_AUTHEN = 0;
            MacType_BLACKHOLE = 1;
            MacType_DYNAMIC = 2;
            MacType_DYNX_BLACKHOLE = 3;
            MacType_EVN = 4;
            MacType_MUX = 5;
            MacType_OVSDB = 6;
            MacType_SECURITY = 7;
            MacType_SNOOPING = 8;
            MacType_STATIC = 9;
            MacType_STICKY = 10;
            MacType_TUNNEL = 11;
         };
         MacType macType = 5;
         string outIfName = 6;
         string peerIp = 7;
         enum PwRole {
            PwRole_MASTER = 0;
            PwRole_NULL = 1;
            PwRole_SLAVE = 2;
         };
         PwRole pwRole = 8;
         string slotId = 9;
      }
      repeated EvpnFdb evpnFdb = 1;
   }
   EvpnFdbs evpnFdbs = 5;
   message GlobalAttribute {
      enum MacAgeTimeEnable {
         MacAgeTimeEnable_DISABLE = 0;
         MacAgeTimeEnable_ENABLE = 1;
      };
      MacAgeTimeEnable macAgeTimeEnable = 1;
      uint32 macAgingTime = 2;
      message MacLimitFirstPacket {
         bool pktenable = 1;
      }
      MacLimitFirstPacket macLimitFirstPacket = 3;
      message MacSynchronize {
         bool synenable = 1;
      }
      MacSynchronize macSynchronize = 4;
   }
   GlobalAttribute globalAttribute = 6;
   message IfMacFlappings {
      message IfMacFlapping {
         enum Action {
            Action_ERRORDOWN = 0;
         };
         Action action = 1;
         string ifName = 2;
      }
      repeated IfMacFlapping ifMacFlapping = 1;
   }
   IfMacFlappings ifMacFlappings = 7;
   message IfMacLimits {
      message IfMacLimit {
         enum Action {
            Action_DISCARD = 0;
            Action_FORWARD = 1;
         };
         Action action = 1;
         enum Alarm {
            Alarm_DISABLE = 0;
            Alarm_ENABLE = 1;
         };
         Alarm alarm = 2;
         string ifName = 3;
         enum LimitType {
            LimitType_MACAPPLY = 0;
            LimitType_MACLIMIT = 1;
         };
         LimitType limitType = 4;
         uint32 maximum = 5;
         uint32 rate = 6;
         string ruleName = 7;
      }
      repeated IfMacLimit ifMacLimit = 1;
   }
   IfMacLimits ifMacLimits = 8;
   message IfMacMultiPortCfgs {
      message IfMacMultiPortCfg {
         string macAddress = 1;
         string outIfName = 2;
         uint32 vlanId = 3;
      }
      repeated IfMacMultiPortCfg ifMacMultiPortCfg = 1;
   }
   IfMacMultiPortCfgs ifMacMultiPortCfgs = 9;
   message IfStormBlocks {
      message IfStormBlock {
         enum BlockType {
            BlockType_BROADCAST = 0;
            BlockType_MULTICAST = 1;
            BlockType_UNICAST = 2;
            BlockType_UNKNOWNUNICAST = 3;
         };
         BlockType blockType = 1;
         enum Direction {
            Direction_INBOUND = 0;
            Direction_OUTBOUND = 1;
         };
         Direction direction = 2;
         string ifName = 3;
      }
      repeated IfStormBlock ifStormBlock = 1;
   }
   IfStormBlocks ifStormBlocks = 10;
   message IfStormContrls {
      message IfStormContrl {
         enum Action {
            Action_BLOCK = 0;
            Action_ERRORDOWN = 1;
            Action_NORMAL = 2;
            Action_SUPPRESS = 3;
         };
         Action action = 1;
         string ifName = 2;
         message IfPacketContrlAttributes {
            message IfPacketContrlAttribute {
               uint64 maxRate = 1;
               uint32 minRate = 2;
               enum PacketType {
                  PacketType_BROADCAST = 0;
                  PacketType_MULTICAST = 1;
                  PacketType_UNICAST = 2;
                  PacketType_UNKNOWNX_UNICAST = 3;
               };
               PacketType packetType = 3;
               enum RateType {
                  RateType_KBPS = 0;
                  RateType_PERCENT = 1;
                  RateType_PPS = 2;
               };
               RateType rateType = 4;
            }
            repeated IfPacketContrlAttribute ifPacketContrlAttribute = 1;
         }
         IfPacketContrlAttributes ifPacketContrlAttributes = 3;
         message IfstormContrlInfos {
            message IfstormContrlInfo {
               string lastPunishTime = 1;
               enum PacketType {
                  PacketType_BROADCAST = 0;
                  PacketType_MULTICAST = 1;
                  PacketType_UNICAST = 2;
                  PacketType_UNKNOWNX_UNICAST = 3;
               };
               PacketType packetType = 2;
               enum PunishStatus {
                  PunishStatus_BLOCK = 0;
                  PunishStatus_ERRORDOWN = 1;
                  PunishStatus_NORMAL = 2;
                  PunishStatus_SUPPRESS = 3;
               };
               PunishStatus punishStatus = 3;
            }
            repeated IfstormContrlInfo ifstormContrlInfo = 1;
         }
         IfstormContrlInfos ifstormContrlInfos = 4;
         uint64 interval = 5;
         enum LogEnable {
            LogEnable_DISABLE = 0;
            LogEnable_ENABLE = 1;
         };
         LogEnable logEnable = 6;
         enum TrapEnable {
            TrapEnable_DISABLE = 0;
            TrapEnable_ENABLE = 1;
         };
         TrapEnable trapEnable = 7;
      }
      repeated IfStormContrl ifStormContrl = 1;
   }
   IfStormContrls ifStormContrls = 11;
   message IfStormSupps {
      message IfStormSupp {
         uint64 cbs = 1;
         uint64 cir = 2;
         string ifName = 3;
         uint64 packets = 4;
         uint64 percent = 5;
         enum SuppressType {
            SuppressType_BROADCAST = 0;
            SuppressType_MULTICAST = 1;
            SuppressType_UNICAST = 2;
            SuppressType_UNKNOWNUNICAST = 3;
         };
         SuppressType suppressType = 6;
      }
      repeated IfStormSupp ifStormSupp = 1;
   }
   IfStormSupps ifStormSupps = 12;
   message IfVlanMacLimits {
      message IfVlanMacLimit {
         enum Action {
            Action_DISCARD = 0;
            Action_FORWARD = 1;
         };
         Action action = 1;
         enum Alarm {
            Alarm_DISABLE = 0;
            Alarm_ENABLE = 1;
         };
         Alarm alarm = 2;
         string ifName = 3;
         enum LimitType {
            LimitType_MACAPPLY = 0;
            LimitType_MACLIMIT = 1;
         };
         LimitType limitType = 4;
         uint32 maximum = 5;
         uint32 rate = 6;
         string ruleName = 7;
         uint32 vlanBegin = 8;
         uint32 vlanEnd = 9;
      }
      repeated IfVlanMacLimit ifVlanMacLimit = 1;
   }
   IfVlanMacLimits ifVlanMacLimits = 13;
   message MacAddrSummarys {
      message MacAddrSummary {
         uint32 blackholeNum = 1;
         string slotId = 3;
         uint32 staticNum = 4;
         uint32 totalNum = 5;
         uint32 authenNum = 6;
         uint32 capacity = 7;
         uint32 dynLocalNum = 8;
         uint32 dynRemote = 9;
         uint32 dynTrunk = 10;
         uint32 evnNum = 11;
         uint32 guestNum = 12;
         uint32 muxNum = 13;
         uint32 oamNum = 14;
         uint32 ovsdbNum = 15;
         uint32 securityNum = 16;
         uint32 snoopingNum = 17;
         uint32 stickyNum = 18;
         uint32 tunnelNum = 19;
      }
      repeated MacAddrSummary macAddrSummary = 1;
   }
   MacAddrSummarys macAddrSummarys = 14;
   message MacDiscards {
      message MacDiscard {
         enum DiscardType {
            DiscardType_BROADCASTDISCARD = 0;
            DiscardType_UNKNOWNMULTICASTDISCARD = 1;
            DiscardType_UNKNOWNUNICASTDISCARD = 2;
         };
         DiscardType discardType = 1;
         string ifName = 2;
      }
      repeated MacDiscard macDiscard = 1;
   }
   MacDiscards macDiscards = 15;
   message MacFlpDetectExcludeMacs {
      message MacFlpDetectExcludeMac {
         string macAddress = 1;
         uint32 macMask = 2;
      }
      repeated MacFlpDetectExcludeMac macFlpDetectExcludeMac = 1;
   }
   MacFlpDetectExcludeMacs macFlpDetectExcludeMacs = 16;
   message MacLimitRules {
      message MacLimitRule {
         enum Action {
            Action_DISCARD = 0;
            Action_FORWARD = 1;
         };
         Action action = 1;
         enum Alarm {
            Alarm_DISABLE = 0;
            Alarm_ENABLE = 1;
         };
         Alarm alarm = 2;
         uint32 maximum = 3;
         uint32 rate = 4;
         string ruleName = 5;
      }
      repeated MacLimitRule macLimitRule = 1;
   }
   MacLimitRules macLimitRules = 17;
   message MacUsages {
      message MacUsage {
         uint32 macCapability = 1;
         uint32 macThreshold = 2;
         uint32 macUsage = 3;
         string slot = 4;
         string slotType = 5;
      }
      repeated MacUsage macUsage = 1;
   }
   MacUsages macUsages = 18;
   message MacflpDetectExcludeBDs {
      message MacflpDetectExcludeBD {
         uint32 bdBgn = 1;
         uint32 bdEnd = 2;
      }
      repeated MacflpDetectExcludeBD macflpDetectExcludeBD = 1;
   }
   MacflpDetectExcludeBDs macflpDetectExcludeBDs = 19;
   message MacflpDetectExcludeVlan {
      string vlanLists = 1;
   }
   MacflpDetectExcludeVlan macflpDetectExcludeVlan = 20;
   message MacflpDetectGlbAttr {
      uint32 macflpAgingTime = 1;
      enum MacflpDetectEnable {
         MacflpDetectEnable_DISABLE = 0;
         MacflpDetectEnable_ENABLE = 1;
      };
      MacflpDetectEnable macflpDetectEnable = 2;
      enum MacflpDetectLevel {
         MacflpDetectLevel_HIGH = 0;
         MacflpDetectLevel_LOW = 1;
         MacflpDetectLevel_MIDDLE = 2;
      };
      MacflpDetectLevel macflpDetectLevel = 3;
      enum MacflpTrapEnable {
         MacflpTrapEnable_DISABLE = 0;
         MacflpTrapEnable_ENABLE = 1;
      };
      MacflpTrapEnable macflpTrapEnable = 4;
      uint32 macflpTrapInterval = 5;
   }
   MacflpDetectGlbAttr macflpDetectGlbAttr = 21;
   message MacflpDetectRecords {
      message MacflpDetectRecord {
         string broadcastDomainName = 1;
         enum BroadcastDomainType {
            BroadcastDomainType_BD = 0;
            BroadcastDomainType_EVPN = 1;
            BroadcastDomainType_VLAN = 2;
            BroadcastDomainType_VSI = 3;
         };
         BroadcastDomainType broadcastDomainType = 2;
         string endTime = 3;
         string macAddress = 4;
         uint32 moveNum = 5;
         message MovePorts {
            message MovePort {
               string movePort = 1;
               enum MovePortType {
                  MovePortType_NICKNAME = 0;
                  MovePortType_PEERIP = 1;
                  MovePortType_PHYSICALPORT = 2;
               };
               MovePortType movePortType = 2;
               uint32 moveSequence = 3;
            }
            repeated MovePort movePort = 1;
         }
         MovePorts movePorts = 6;
         message OriginalPorts {
            message OriginalPort {
               string orgPort = 1;
               enum OrgPortType {
                  OrgPortType_NICKNAME = 0;
                  OrgPortType_PEERIP = 1;
                  OrgPortType_PHYSICALPORT = 2;
               };
               OrgPortType orgPortType = 2;
            }
            repeated OriginalPort originalPort = 1;
         }
         OriginalPorts originalPorts = 7;
         string slotId = 8;
         string startTime = 9;
      }
      repeated MacflpDetectRecord macflpDetectRecord = 1;
   }
   MacflpDetectRecords macflpDetectRecords = 22;
   message NveMacLimits {
      message NveMacLimit {
         enum Action {
            Action_DISCARD = 0;
            Action_FORWARD = 1;
         };
         Action action = 1;
         enum Alarm {
            Alarm_DISABLE = 0;
            Alarm_ENABLE = 1;
         };
         Alarm alarm = 2;
         string ifName = 3;
         uint32 maximum = 4;
         string peerAddress = 5;
      }
      repeated NveMacLimit nveMacLimit = 1;
   }
   NveMacLimits nveMacLimits = 23;
   message PbbFdbs {
      message PbbFdb {
         string bDmac = 1;
         string bSmac = 2;
         string broadcastDomainName = 3;
         enum BroadcastDomainType {
            BroadcastDomainType_BD = 0;
            BroadcastDomainType_EVPN = 1;
            BroadcastDomainType_VLAN = 2;
            BroadcastDomainType_VSI = 3;
         };
         BroadcastDomainType broadcastDomainType = 4;
         uint32 iTag = 5;
         string lastChangeTime = 6;
         string macAddress = 7;
         string slotId = 8;
      }
      repeated PbbFdb pbbFdb = 1;
   }
   PbbFdbs pbbFdbs = 24;
   message PortSecurityCfgs {
      message PortSecurityCfg {
         uint32 agingTime = 1;
         enum AgingType {
            AgingType_ABSOLUTE = 0;
            AgingType_INACTIVITY = 1;
         };
         AgingType agingType = 2;
         string ifName = 3;
         enum MacAddressSticky {
            MacAddressSticky_DISABLE = 0;
            MacAddressSticky_ENABLE = 1;
         };
         MacAddressSticky macAddressSticky = 4;
         uint32 maximum = 5;
         enum ProtectAction {
            ProtectAction_ERRORX_DOWN = 0;
            ProtectAction_PROTECT = 1;
            ProtectAction_RESTRICT = 2;
         };
         ProtectAction protectAction = 6;
      }
      repeated PortSecurityCfg portSecurityCfg = 1;
   }
   PortSecurityCfgs portSecurityCfgs = 25;
   message PwMacLimits {
      message PwMacLimit {
         enum Action {
            Action_DISCARD = 0;
            Action_FORWARD = 1;
         };
         Action action = 1;
         enum Alarm {
            Alarm_DISABLE = 0;
            Alarm_ENABLE = 1;
         };
         Alarm alarm = 2;
         uint32 maximum = 3;
         string pwName = 4;
         uint32 rate = 5;
         string vsiName = 6;
      }
      repeated PwMacLimit pwMacLimit = 1;
   }
   PwMacLimits pwMacLimits = 26;
   message PwSuppressPtns {
      message PwSuppressPtn {
         uint32 broadcast = 1;
         bool isEnable = 2;
         uint32 multicast = 3;
         string peerIp = 4;
         enum PwEncap {
            PwEncap_ETHERNET = 0;
            PwEncap_VLAN = 1;
         };
         PwEncap pwEncap = 5;
         uint32 pwId = 6;
         enum SuppressType {
            SuppressType_ABSOLUTEVALUE = 0;
            SuppressType_PERCENT = 1;
         };
         SuppressType suppressType = 7;
         uint32 unicast = 8;
         string vsiName = 9;
      }
      repeated PwSuppressPtn pwSuppressPtn = 1;
   }
   PwSuppressPtns pwSuppressPtns = 27;
   message PwSuppresss {
      message PwSuppress {
         uint64 cbs = 1;
         uint64 cir = 2;
         string pwName = 3;
         enum SuppressType {
            SuppressType_BROADCAST = 0;
            SuppressType_MULTICAST = 1;
            SuppressType_UNICAST = 2;
            SuppressType_UNKNOWNUNICAST = 3;
         };
         SuppressType suppressType = 4;
         string vsiName = 5;
      }
      repeated PwSuppress pwSuppress = 1;
   }
   PwSuppresss pwSuppresss = 28;
   message SubIfSuppresss {
      message SubIfSuppress {
         uint64 cbs = 1;
         uint64 cir = 2;
         enum Direction {
            Direction_INBOUND = 0;
            Direction_OUTBOUND = 1;
         };
         Direction direction = 3;
         string ifName = 4;
         enum SuppressType {
            SuppressType_BROADCAST = 0;
            SuppressType_MULTICAST = 1;
            SuppressType_UNICAST = 2;
            SuppressType_UNKNOWNUNICAST = 3;
         };
         SuppressType suppressType = 5;
      }
      repeated SubIfSuppress subIfSuppress = 1;
   }
   SubIfSuppresss subIfSuppresss = 29;
   message SubifMacLimits {
      message SubifMacLimit {
         enum Action {
            Action_DISCARD = 0;
            Action_FORWARD = 1;
         };
         Action action = 1;
         enum Alarm {
            Alarm_DISABLE = 0;
            Alarm_ENABLE = 1;
         };
         Alarm alarm = 2;
         string ifName = 3;
         enum LimitType {
            LimitType_MACAPPLY = 0;
            LimitType_MACLIMIT = 1;
         };
         LimitType limitType = 4;
         uint32 maximum = 5;
         uint32 rate = 6;
         string ruleName = 7;
         string vsiName = 8;
      }
      repeated SubifMacLimit subifMacLimit = 1;
   }
   SubifMacLimits subifMacLimits = 30;
   message VlanFdbDynamics {
      message VlanFdbDynamic {
         uint32 ceVlanId = 1;
         bool isCeDefault = 2;
         bool isFlood = 3;
         bool isIMac = 4;
         string lastChangeTime = 5;
         uint32 learnedPeriod = 6;
         string macAddress = 7;
         enum MacType {
            MacType_AUTHEN = 0;
            MacType_BLACKHOLE = 1;
            MacType_DYNAMIC = 2;
            MacType_DYNX_BLACKHOLE = 3;
            MacType_EVN = 4;
            MacType_MUX = 5;
            MacType_OVSDB = 6;
            MacType_SECURITY = 7;
            MacType_SNOOPING = 8;
            MacType_STATIC = 9;
            MacType_STICKY = 10;
            MacType_TUNNEL = 11;
         };
         MacType macType = 8;
         string outIfName = 9;
         string outNickname = 10;
         message OutPeerIPs {
            message OutPeerIP {
               string outPeerIP = 1;
            }
            repeated OutPeerIP outPeerIP = 1;
         }
         OutPeerIPs outPeerIPs = 11;
         string slotId = 12;
         uint32 vlanId = 13;
      }
      repeated VlanFdbDynamic vlanFdbDynamic = 1;
   }
   VlanFdbDynamics vlanFdbDynamics = 31;
   message VlanFdbs {
      message VlanFdb {
         uint32 ceVlanId = 1;
         bool isCeDefault = 2;
         bool isFlood = 3;
         bool isIMac = 4;
         uint32 learnedPeriod = 5;
         string macAddress = 6;
         enum MacType {
            MacType_AUTHEN = 0;
            MacType_BLACKHOLE = 1;
            MacType_DYNAMIC = 2;
            MacType_DYNX_BLACKHOLE = 3;
            MacType_EVN = 4;
            MacType_MUX = 5;
            MacType_OVSDB = 6;
            MacType_SECURITY = 7;
            MacType_SNOOPING = 8;
            MacType_STATIC = 9;
            MacType_STICKY = 10;
            MacType_TUNNEL = 11;
         };
         MacType macType = 7;
         string outIfName = 8;
         string outNickname = 9;
         message OutPeerIPs {
            message OutPeerIP {
               string outPeerIP = 1;
            }
            repeated OutPeerIP outPeerIP = 1;
         }
         OutPeerIPs outPeerIPs = 10;
         string slotId = 11;
         uint32 vlanId = 12;
      }
      repeated VlanFdb vlanFdb = 1;
   }
   VlanFdbs vlanFdbs = 32;
   message VlanMacLimits {
      message VlanMacLimit {
         enum Action {
            Action_DISCARD = 0;
            Action_FORWARD = 1;
         };
         Action action = 1;
         enum Alarm {
            Alarm_DISABLE = 0;
            Alarm_ENABLE = 1;
         };
         Alarm alarm = 2;
         uint32 downThresholdCx = 3;
         uint32 maximum = 4;
         uint32 rate = 5;
         uint32 upThresholdCx = 6;
         uint32 vlanId = 7;
      }
      repeated VlanMacLimit vlanMacLimit = 1;
   }
   VlanMacLimits vlanMacLimits = 33;
   message VlanStormSupps {
      message VlanStormSupp {
         uint64 cbs = 1;
         uint64 cir = 2;
         enum SuppressType {
            SuppressType_BROADCAST = 0;
            SuppressType_MULTICAST = 1;
            SuppressType_UNICAST = 2;
            SuppressType_UNKNOWNUNICAST = 3;
         };
         SuppressType suppressType = 3;
         uint32 vlanId = 4;
      }
      repeated VlanStormSupp vlanStormSupp = 1;
   }
   VlanStormSupps vlanStormSupps = 34;
   message VniMacLearns {
      message VniMacLearn {
         string ifName = 1;
      }
      repeated VniMacLearn vniMacLearn = 1;
   }
   VniMacLearns vniMacLearns = 35;
   message VsiFdbDynamics {
      message VsiFdbDynamic {
         uint32 cevid = 1;
         uint64 desByteCount = 2;
         uint64 desPacketCount = 3;
         bool isIMac = 4;
         bool isIncludeStackingCeVlan = 5;
         string lastChangeTime = 6;
         bool macAccEnable = 7;
         string macAddress = 8;
         enum MacType {
            MacType_AUTHEN = 0;
            MacType_BLACKHOLE = 1;
            MacType_DYNAMIC = 2;
            MacType_DYNX_BLACKHOLE = 3;
            MacType_EVN = 4;
            MacType_MUX = 5;
            MacType_OVSDB = 6;
            MacType_SECURITY = 7;
            MacType_SNOOPING = 8;
            MacType_STATIC = 9;
            MacType_STICKY = 10;
            MacType_TUNNEL = 11;
         };
         MacType macType = 9;
         string outIfName = 10;
         enum OutIfType {
            OutIfType_AC = 0;
            OutIfType_PW = 1;
         };
         OutIfType outIfType = 11;
         string peerIp = 12;
         uint32 pevid = 13;
         enum PwEncap {
            PwEncap_ETHERNET = 0;
            PwEncap_VLAN = 1;
         };
         PwEncap pwEncap = 14;
         uint32 pwId = 15;
         string pwName = 16;
         enum PwRole {
            PwRole_MASTER = 0;
            PwRole_NULL = 1;
            PwRole_SLAVE = 2;
         };
         PwRole pwRole = 17;
         string slotId = 18;
         uint64 souByteCount = 19;
         uint64 souPacketCount = 20;
         uint32 vlanid = 21;
         string vlanifName = 22;
         string vsiName = 23;
      }
      repeated VsiFdbDynamic vsiFdbDynamic = 1;
   }
   VsiFdbDynamics vsiFdbDynamics = 36;
   message VsiFdbs {
      message VsiFdb {
         uint32 cevid = 1;
         bool isCeAny = 2;
         bool isIMac = 3;
         uint32 learnedPeriod = 4;
         string macAddress = 5;
         enum MacType {
            MacType_AUTHEN = 0;
            MacType_BLACKHOLE = 1;
            MacType_DYNAMIC = 2;
            MacType_DYNX_BLACKHOLE = 3;
            MacType_EVN = 4;
            MacType_MUX = 5;
            MacType_OVSDB = 6;
            MacType_SECURITY = 7;
            MacType_SNOOPING = 8;
            MacType_STATIC = 9;
            MacType_STICKY = 10;
            MacType_TUNNEL = 11;
         };
         MacType macType = 6;
         string outIfName = 7;
         enum OutIfType {
            OutIfType_AC = 0;
            OutIfType_PW = 1;
         };
         OutIfType outIfType = 8;
         string peerIp = 9;
         uint32 pevid = 10;
         enum PwEncap {
            PwEncap_ETHERNET = 0;
            PwEncap_VLAN = 1;
         };
         PwEncap pwEncap = 11;
         uint32 pwId = 12;
         string pwName = 13;
         string slotId = 14;
         uint32 vlanid = 15;
         string vlanifName = 16;
         string vsiName = 17;
      }
      repeated VsiFdb vsiFdb = 1;
   }
   VsiFdbs vsiFdbs = 37;
   message VsiInSuppressions {
      message VsiInSuppression {
         enum InboundSupp {
            InboundSupp_ENABLE = 0;
         };
         InboundSupp inboundSupp = 1;
         string vsiName = 2;
      }
      repeated VsiInSuppression vsiInSuppression = 1;
   }
   VsiInSuppressions vsiInSuppressions = 38;
   message VsiMacLimits {
      message VsiMacLimit {
         enum Action {
            Action_DISCARD = 0;
            Action_FORWARD = 1;
         };
         Action action = 1;
         enum Alarm {
            Alarm_DISABLE = 0;
            Alarm_ENABLE = 1;
         };
         Alarm alarm = 2;
         uint32 downThreshold = 3;
         uint32 downThresholdCx = 4;
         uint32 maximum = 5;
         uint32 rate = 6;
         uint32 upThreshold = 7;
         uint32 upThresholdCx = 8;
         string vsiName = 9;
      }
      repeated VsiMacLimit vsiMacLimit = 1;
   }
   VsiMacLimits vsiMacLimits = 39;
   message VsiOutSuppressions {
      message VsiOutSuppression {
         enum OutboundSupp {
            OutboundSupp_ENABLE = 0;
         };
         OutboundSupp outboundSupp = 1;
         string vsiName = 2;
      }
      repeated VsiOutSuppression vsiOutSuppression = 1;
   }
   VsiOutSuppressions vsiOutSuppressions = 40;
   message VsiStormSupps {
      message VsiStormSupp {
         uint64 cbs = 1;
         uint64 cir = 2;
         enum SuppressType {
            SuppressType_BROADCAST = 0;
            SuppressType_MULTICAST = 1;
            SuppressType_UNICAST = 2;
            SuppressType_UNKNOWNUNICAST = 3;
         };
         SuppressType suppressType = 3;
         string vsiName = 4;
      }
      repeated VsiStormSupp vsiStormSupp = 1;
   }
   VsiStormSupps vsiStormSupps = 41;
   message VsiSuppressions {
      message VsiSuppression {
         uint64 cbs = 1;
         uint64 cir = 2;
         enum Direction {
            Direction_UNIINBOUND = 0;
            Direction_UNIOUTBOUND = 1;
         };
         Direction direction = 3;
         enum SuppressType {
            SuppressType_BROADCAST = 0;
            SuppressType_MULTICAST = 1;
            SuppressType_UNICAST = 2;
            SuppressType_UNKNOWNUNICAST = 3;
         };
         SuppressType suppressType = 4;
         string vsiName = 5;
      }
      repeated VsiSuppression vsiSuppression = 1;
   }
   VsiSuppressions vsiSuppressions = 42;
   message VsiSuppresss {
      message VsiSuppress {
         uint32 broadcast = 1;
         uint32 broadcastPercent = 2;
         bool isEnable = 3;
         uint32 multicast = 4;
         uint32 multicastPercent = 5;
         string subIfName = 6;
         enum SuppressType {
            SuppressType_ABSOLUTEVALUE = 0;
            SuppressType_PERCENT = 1;
         };
         SuppressType suppressType = 7;
         uint32 unicast = 8;
         uint32 unicastPercent = 9;
         string vsiName = 10;
      }
      repeated VsiSuppress vsiSuppress = 1;
   }
   VsiSuppresss vsiSuppresss = 43;
   message VsiTotalNumbers {
      message VsiTotalNumber {
         enum MacType {
            MacType_AUTHEN = 0;
            MacType_BLACKHOLE = 1;
            MacType_DYNAMIC = 2;
            MacType_DYNX_BLACKHOLE = 3;
            MacType_EVN = 4;
            MacType_MUX = 5;
            MacType_OVSDB = 6;
            MacType_SECURITY = 7;
            MacType_SNOOPING = 8;
            MacType_STATIC = 9;
            MacType_STICKY = 10;
            MacType_TUNNEL = 11;
         };
         MacType macType = 1;
         uint32 number = 2;
         string slotId = 3;
         string vsiName = 4;
      }
      repeated VsiTotalNumber vsiTotalNumber = 1;
   }
   VsiTotalNumbers vsiTotalNumbers = 44;
   message VxlanControls {
      message VxlanControl {
         uint32 bdId = 1;
         string macAddress = 2;
         enum MacType {
            MacType_AUTHEN = 0;
            MacType_BLACKHOLE = 1;
            MacType_DYNAMIC = 2;
            MacType_DYNX_BLACKHOLE = 3;
            MacType_EVN = 4;
            MacType_MUX = 5;
            MacType_OVSDB = 6;
            MacType_SECURITY = 7;
            MacType_SNOOPING = 8;
            MacType_STATIC = 9;
            MacType_STICKY = 10;
            MacType_TUNNEL = 11;
         };
         MacType macType = 3;
         string peerIP = 4;
         string peerIpv6 = 5;
         string slotId = 6;
         string sourceIP = 7;
         string sourceIpv6 = 8;
         enum TunnelType {
            TunnelType_IPV4 = 0;
            TunnelType_IPV6 = 1;
         };
         TunnelType tunnelType = 9;
         uint32 vnId = 10;
      }
      repeated VxlanControl vxlanControl = 1;
   }
   VxlanControls vxlanControls = 45;
   message VxlanFdbDynamics {
      message VxlanFdbDynamic {
         uint32 bdId = 1;
         uint32 learnedPeriod = 2;
         string macAddress = 3;
         enum MacType {
            MacType_AUTHEN = 0;
            MacType_BLACKHOLE = 1;
            MacType_DYNAMIC = 2;
            MacType_DYNX_BLACKHOLE = 3;
            MacType_EVN = 4;
            MacType_MUX = 5;
            MacType_OVSDB = 6;
            MacType_SECURITY = 7;
            MacType_SNOOPING = 8;
            MacType_STATIC = 9;
            MacType_STICKY = 10;
            MacType_TUNNEL = 11;
         };
         MacType macType = 4;
         string peerIP = 5;
         string peerIpv6 = 6;
         string slotId = 7;
         string sourceIP = 8;
         string sourceIpv6 = 9;
         enum TunnelType {
            TunnelType_IPV4 = 0;
            TunnelType_IPV6 = 1;
         };
         TunnelType tunnelType = 10;
         uint32 vnId = 11;
      }
      repeated VxlanFdbDynamic vxlanFdbDynamic = 1;
   }
   VxlanFdbDynamics vxlanFdbDynamics = 46;
   message VxlanFdbs {
      message VxlanFdb {
         uint32 bdId = 1;
         uint32 learnedPeriod = 2;
         string macAddress = 3;
         enum MacType {
            MacType_AUTHEN = 0;
            MacType_BLACKHOLE = 1;
            MacType_DYNAMIC = 2;
            MacType_DYNX_BLACKHOLE = 3;
            MacType_EVN = 4;
            MacType_MUX = 5;
            MacType_OVSDB = 6;
            MacType_SECURITY = 7;
            MacType_SNOOPING = 8;
            MacType_STATIC = 9;
            MacType_STICKY = 10;
            MacType_TUNNEL = 11;
         };
         MacType macType = 4;
         string peerIP = 5;
         string peerIpv6 = 6;
         string slotId = 7;
         string sourceIP = 8;
         string sourceIpv6 = 9;
         enum TunnelType {
            TunnelType_IPV4 = 0;
            TunnelType_IPV6 = 1;
         };
         TunnelType tunnelType = 10;
         uint32 vnId = 11;
      }
      repeated VxlanFdb vxlanFdb = 1;
   }
   VxlanFdbs vxlanFdbs = 47;
}

